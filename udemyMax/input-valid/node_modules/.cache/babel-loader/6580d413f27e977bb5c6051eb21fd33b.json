{"ast":null,"code":"var _jsxFileName = \"/Users/Bartek/Desktop/React/React---notes/udemyMax/input-valid/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [userTouched, setUserTouched] = useState(false);\n  const inputClass = enteredNameIsValid ? 'form-control' : 'form-control invalid';\n\n  const validation = () => {\n    console.log('validation');\n\n    if (name.trim() === '') {\n      setEnteredNameIsValid(false);\n    } else {\n      setEnteredNameIsValid(true);\n    }\n\n    ;\n  };\n\n  const submitFunction = e => {\n    e.preventDefault();\n    console.log('submitFunction');\n    validation();\n    console.log('submitFunctionBeforeValidation');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitFunction,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: inputClass,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        value: name,\n        onChange: input => setName(input.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), !enteredNameIsValid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"The name cannot be empty!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"HVBrv+gdf536ot1+yC10gmwe5lQ=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["React","useState","SimpleInput","props","name","setName","enteredNameIsValid","setEnteredNameIsValid","userTouched","setUserTouched","inputClass","validation","console","log","trim","submitFunction","e","preventDefault","input","target","value"],"sources":["/Users/Bartek/Desktop/React/React---notes/udemyMax/input-valid/src/components/SimpleInput.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst SimpleInput = (props) => {\n  const [name, setName] = useState('');\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [userTouched, setUserTouched] = useState(false);\n\n  const inputClass = enteredNameIsValid ? 'form-control' : 'form-control invalid';\n\n\n  const validation = () => {\n    console.log('validation');\n    if (name.trim() === '') {\n      setEnteredNameIsValid(false);\n    } else {\n      setEnteredNameIsValid(true);\n    };\n  };\n\n  const submitFunction = (e) => {\n    e.preventDefault();\n    console.log('submitFunction');\n    validation();\n    console.log('submitFunctionBeforeValidation');\n  };\n\n  return (\n    <form onSubmit={submitFunction}>\n      <div className={inputClass}>\n        <label htmlFor='name'>Your Name</label>\n        <input\n          type='text'\n          id='name'\n          value={name}\n          onChange={input => setName(input.target.value)}\n        />\n        {!enteredNameIsValid && <p className='error-text'>The name cannot be empty!</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button type='submit'>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACK,kBAAD,EAAqBC,qBAArB,IAA8CN,QAAQ,CAAC,KAAD,CAA5D;EACA,MAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,KAAD,CAA9C;EAEA,MAAMS,UAAU,GAAGJ,kBAAkB,GAAG,cAAH,GAAoB,sBAAzD;;EAGA,MAAMK,UAAU,GAAG,MAAM;IACvBC,OAAO,CAACC,GAAR,CAAY,YAAZ;;IACA,IAAIT,IAAI,CAACU,IAAL,OAAgB,EAApB,EAAwB;MACtBP,qBAAqB,CAAC,KAAD,CAArB;IACD,CAFD,MAEO;MACLA,qBAAqB,CAAC,IAAD,CAArB;IACD;;IAAA;EACF,CAPD;;EASA,MAAMQ,cAAc,GAAIC,CAAD,IAAO;IAC5BA,CAAC,CAACC,cAAF;IACAL,OAAO,CAACC,GAAR,CAAY,gBAAZ;IACAF,UAAU;IACVC,OAAO,CAACC,GAAR,CAAY,gCAAZ;EACD,CALD;;EAOA,oBACE;IAAM,QAAQ,EAAEE,cAAhB;IAAA,wBACE;MAAK,SAAS,EAAEL,UAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,IAAI,EAAC,MADP;QAEE,EAAE,EAAC,MAFL;QAGE,KAAK,EAAEN,IAHT;QAIE,QAAQ,EAAEc,KAAK,IAAIb,OAAO,CAACa,KAAK,CAACC,MAAN,CAAaC,KAAd;MAJ5B;QAAA;QAAA;QAAA;MAAA,QAFF,EAQG,CAACd,kBAAD,iBAAuB;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAR1B;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAWE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAQ,IAAI,EAAC,QAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAXF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAiBD,CAzCD;;GAAMJ,W;;KAAAA,W;AA2CN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}